# Exercise_1
# Создать список и заполнить его элементами различных типов данных. Реализовать скрипт
# проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
#
# a = [12, "Hello!", True, tuple('Hello'), {'How are you?'}, [2, 3, 4], (b'text')]
# for i in a:
#     print(type(i))


# Exercise_2
# Для списка реализовать обмен значений соседних элементов. Значениями обмениваются
# элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве элементов последний
# сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию
# input().
#
# my_list = list(input("Введите элементы списка: "))
# a = len(my_list) - 1
# for i in range(0, a, 2):
#     my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]
# print(my_list)


# Exercise_3
# Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года
# относится месяц (зима, весна, лето, осень). Напишите решения через list и dict.
#
# month = (input('Введите месяц в виде целого числа: '))
# x = {'Winter': [12, 1, 2], "Spring": [3, 4, 5],"Summer": [6, 7, 8],"Autumn": [9, 10, 11]}
# for key in x.keys():
#     if month in x[key]:
#         print(key)


# month = int(input('Введите месяц в виде целого числа: '))
# x = {
#     1: "January",
#     2: "February",
#     3: "March",
#     4: "April",
#     5: "May",
#     6: "June",
#     7: "July",
#     8: "August",
#     9: "September",
#     10: "October",
#     11: "November",
#     12: "December"
# }
# print(x[month])

# Exercise_4
# Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое
# слово с новой строки. Строки нужно пронумеровать. Если слово длинное, выводить только
# первые 10 букв в слове.

# words = input('Введите предложение состоящее из слов, разделенных пробелами: ').split()
# for i, words in enumerate(words):
#     print(i+1, words[:10])

# Exercise_5
# Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который
# не возрастает. У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге
# существуют элементы с одинаковыми значениями, то новый элемент с тем же значением
# должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

# number = int(input("Введите цифру рейтинга: "))
# my_list = [7, 5, 3, 3, 2]
# if number >= 7:
#     my_list.insert(0, number)
#     print(my_list)
# elif 7 > number >= 5 :
#     my_list.insert(1, number)
#     print(my_list)
# elif 5 > number >= 3 :
#     my_list.insert(2, number)
#     print(my_list)
# elif 3 > number >= 2 :
#     my_list.insert(3, number)
#     print(my_list)
# else:
#     my_list.insert(5, number)
#     print(my_list)
#8